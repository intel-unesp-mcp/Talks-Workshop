Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/2=50.0%] novec.c(22,11)
  -> EXTERN: (25,7) _vla_alloc(long)
  -> EXTERN: (26,7) _vla_alloc(long)
  -> EXTERN: (27,7) _vla_alloc(long)
  -> EXTERN: (35,3) _vla_free(void *, long)
  -> EXTERN: (35,3) _vla_free(void *, long)
  -> EXTERN: (35,3) _vla_free(void *, long)
  -> EXTERN: (36,1) srand(unsigned int)
  -> EXTERN: (36,7) time(time_t *)
  -> EXTERN: (37,7) rand(void)
  -> INLINE: (50,11) foo(int) (isz = 38) (sz = 45)
    -> EXTERN: (7,7) cos(double)
    -> EXTERN: (9,10) sin(double)
    -> EXTERN: (12,12) sin(double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at novec.c(29,3)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at novec.c(29,3)
   remark #15388: vectorization support: reference A has aligned access   [ novec.c(30,5) ]
   remark #15388: vectorization support: reference B has aligned access   [ novec.c(31,5) ]
   remark #15388: vectorization support: reference C has aligned access   [ novec.c(32,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 4.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=5624
LOOP END

LOOP BEGIN at novec.c(29,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference A has aligned access   [ novec.c(30,5) ]
   remark #15388: vectorization support: reference B has aligned access   [ novec.c(31,5) ]
   remark #15388: vectorization support: reference C has aligned access   [ novec.c(32,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at novec.c(35,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at novec.c(39,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A line 40 and A line 40
      remark #15346: vector dependence: assumed ANTI dependence between A line 40 and A line 40
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at novec.c(39,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at novec.c(43,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A line 44 and A line 44
      remark #15346: vector dependence: assumed ANTI dependence between A line 44 and A line 44
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at novec.c(43,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at novec.c(46,3)
      remark #15389: vectorization support: reference B has unaligned access   [ novec.c(47,5) ]
      remark #15389: vectorization support: reference C has unaligned access   [ novec.c(47,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: scatter was emulated for the variable A:  indirect access    [ novec.c(47,5) ]
      remark #15328: vectorization support: gather was emulated for the variable B:  indirect access    [ novec.c(47,14) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.008
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15458: masked indexed (or gather) loads: 1 
      remark #15459: masked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 22.750 
      remark #15478: estimated potential speedup: 0.350 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at novec.c(46,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at novec.c(49,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at novec.c(11,5) inlined into novec.c(50,11)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between aux line 12 and aux line 12
         remark #15346: vector dependence: assumed ANTI dependence between aux line 12 and aux line 12
         remark #15346: vector dependence: assumed ANTI dependence between aux line 12 and aux line 12
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: foo(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (foo(int)) [2/2=100.0%] novec.c(4,15)
  -> EXTERN: (7,7) cos(double)
  -> EXTERN: (9,10) sin(double)
  -> EXTERN: (12,12) sin(double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at novec.c(11,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between aux line 12 and aux line 12
   remark #15346: vector dependence: assumed ANTI dependence between aux line 12 and aux line 12
LOOP END
===========================================================================
